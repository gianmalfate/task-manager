name: Django Tests

# Executa o workflow quando:
# - Um PR √© aberto/atualizado para a branch main
# - Um push √© feito na branch main
# - Manualmente atrav√©s do GitHub Actions
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    env:
      DJANGO_SETTINGS_MODULE: dia_organizado.settings
      PYTHONPATH: .
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
    
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache depend√™ncias pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Debug - Verificar estrutura do projeto
      run: |
        echo "üìÅ Estrutura do diret√≥rio atual:"
        ls -la
        echo ""
        echo "üîç Verificando arquivos essenciais:"
        echo "requirements.txt existe: $(test -f requirements.txt && echo 'SIM' || echo 'N√ÉO')"
        echo "manage.py existe: $(test -f manage.py && echo 'SIM' || echo 'N√ÉO')"
        echo "settings.py existe: $(test -f dia_organizado/settings.py && echo 'SIM' || echo 'N√ÉO')"
    
    - name: Instalar depend√™ncias
      run: |
        echo "üêç Vers√£o do Python:"
        python --version
        echo "üì¶ Atualizando pip..."
        python -m pip install --upgrade pip
        echo "üì¶ Instalando depend√™ncias..."
        pip install -r requirements.txt --verbose
        echo "üì¶ Pacotes instalados:"
        pip list | grep -E "(Django|crispy|decouple)"
    
    - name: Configurar Django
      run: |
        echo "üîß Verificando configura√ß√£o do Django..."
        python manage.py check --verbosity=2
    
    - name: Executar migra√ß√µes
      run: |
        echo "üóÑÔ∏è Executando migra√ß√µes..."
        python manage.py migrate --verbosity=2
    
    - name: Executar testes
      run: |
        python manage.py test --verbosity=2
    
    - name: Executar testes com cobertura
      run: |
        pip install coverage
        coverage run --source='.' manage.py test
        coverage report
        coverage html
    
    - name: Upload relat√≥rio de cobertura
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-python-${{ matrix.python-version }}
        path: htmlcov/
        retention-days: 30

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Instalar depend√™ncias de linting
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Verificar formata√ß√£o com Black
      run: |
        black --check --diff .
    
    - name: Verificar imports com isort
      run: |
        isort --check-only --diff .
    
    - name: An√°lise de c√≥digo com flake8
      run: |
        # Para o primeiro setup, vamos ser mais permissivos
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Depois voc√™ pode tornar mais rigoroso:
        # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Instalar depend√™ncias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: Verificar vulnerabilidades nas depend√™ncias
      run: |
        safety check
    
    - name: An√°lise de seguran√ßa do c√≥digo
      run: |
        bandit -r . -x tests.py,*/migrations/*,*/venv/*,*/.venv/* || true

  # Job que s√≥ executa se todos os testes passarem
  deployment-ready:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: success()
    
    steps:
    - name: Todos os testes passaram ‚úÖ
      run: |
        echo "üéâ Todos os testes, linting e verifica√ß√µes de seguran√ßa passaram!"
        echo "‚úÖ O c√≥digo est√° pronto para merge na branch main"
        echo "üìä Relat√≥rios de cobertura dispon√≠veis nos artefatos"
