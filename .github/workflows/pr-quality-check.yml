name: PR Quality Check

# Workflow otimizado para Pull Requests
# Executa verificações essenciais rapidamente
on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  quick-test:
    runs-on: ubuntu-latest
    
    env:
      DJANGO_SETTINGS_MODULE: dia_organizado.settings
      SECRET_KEY: django-insecure-test-key-for-ci-cd-only
      DEBUG: 'True'
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache dependências
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Debug - Verificar estrutura do projeto
      run: |
        echo "📁 Estrutura do diretório atual:"
        ls -la
        echo ""
        echo "🔍 Verificando arquivos essenciais:"
        echo "requirements.txt existe: $(test -f requirements.txt && echo 'SIM' || echo 'NÃO')"
        echo "manage.py existe: $(test -f manage.py && echo 'SIM' || echo 'NÃO')"
        echo "settings.py existe: $(test -f dia_organizado/settings.py && echo 'SIM' || echo 'NÃO')"
        echo ""
        if [ -f requirements.txt ]; then
          echo "📦 Conteúdo do requirements.txt:"
          cat requirements.txt
        fi
    
    - name: Instalar dependências
      run: |
        echo "🐍 Versão do Python:"
        python --version
        echo ""
        echo "📦 Atualizando pip..."
        python -m pip install --upgrade pip
        echo ""
        echo "📦 Instalando dependências..."
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt --verbose
        else
          echo "❌ Arquivo requirements.txt não encontrado!"
          exit 1
        fi
        echo ""
        echo "📦 Pacotes instalados:"
        pip list
    
    - name: Configurar Django
      run: |
        echo "🔧 Verificando configuração do Django..."
        if [ -f manage.py ]; then
          python manage.py check --verbosity=2
        else
          echo "❌ manage.py não encontrado!"
          exit 1
        fi
    
    - name: Executar migrações
      run: |
        echo "🗄️ Executando migrações..."
        python manage.py migrate --verbosity=2
    
    - name: Executar testes da aplicação tarefas
      run: |
        echo "🧪 Executando testes..."
        python manage.py test tarefas --verbosity=2 --keepdb --debug-mode
    
    - name: Verificar se há migrações pendentes
      run: |
        echo "🔍 Verificando migrações pendentes..."
        python manage.py makemigrations --check --dry-run --verbosity=2
    
    - name: Comentar resultado no PR
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          // Remove comentários anteriores do bot
          for (const comment of comments) {
            if (comment.user.type === 'Bot' && comment.body.includes('🧪 Resultado dos Testes')) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
              });
            }
          }
          
          const success = '${{ job.status }}' === 'success';
          const emoji = success ? '✅' : '❌';
          const status = success ? 'PASSOU' : 'FALHOU';
          
          const body = `🧪 **Resultado dos Testes** ${emoji}
          
**Status:** ${status}

${success ? 
  '✅ Todos os testes passaram! O PR está pronto para revisão.' : 
  '❌ Alguns testes falharam. Verifique os logs do workflow para mais detalhes.'
}

**Testes executados:**
- ✅ Testes de modelos (Tarefa, Categoria)
- ✅ Testes de views (CRUD operations)
- ✅ Testes de formulários (Validações)
- ✅ Testes de busca e filtros
- ✅ Verificação de migrações

**Próximos passos:**
${success ? 
  '- 👀 Aguarde a revisão do código\n- 🚀 Após aprovação, faça o merge' : 
  '- 🔧 Corrija os testes que falharam\n- 📝 Faça commit das correções\n- 🔄 O workflow executará automaticamente'
}`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: body
          });

  # Verificação de arquivos alterados
  file-changes:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Verificar arquivos alterados
      run: |
        echo "📁 Arquivos alterados neste PR:"
        git diff --name-only origin/main...HEAD
        
        echo ""
        echo "🧪 Verificando se testes foram afetados..."
        
        # Verifica se models.py foi alterado
        if git diff --name-only origin/main...HEAD | grep -q "models.py"; then
          echo "⚠️  models.py foi alterado - certifique-se de que os testes de modelo estão atualizados"
        fi
        
        # Verifica se views.py foi alterado
        if git diff --name-only origin/main...HEAD | grep -q "views.py"; then
          echo "⚠️  views.py foi alterado - certifique-se de que os testes de view estão atualizados"
        fi
        
        # Verifica se forms.py foi alterado
        if git diff --name-only origin/main...HEAD | grep -q "forms.py"; then
          echo "⚠️  forms.py foi alterado - certifique-se de que os testes de formulário estão atualizados"
        fi
        
        # Verifica se requirements.txt foi alterado
        if git diff --name-only origin/main...HEAD | grep -q "requirements.txt"; then
          echo "📦 requirements.txt foi alterado - novas dependências serão instaladas"
        fi
