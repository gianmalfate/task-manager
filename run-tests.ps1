# üß™ Script PowerShell para executar todos os testes localmente
# Executa as mesmas verifica√ß√µes que o CI/CD executa

Write-Host "üöÄ Executando verifica√ß√µes de qualidade do c√≥digo..." -ForegroundColor Cyan
Write-Host "==================================================" -ForegroundColor Cyan

# Fun√ß√£o para imprimir status
function Print-Status {
    param($ExitCode, $Message)
    if ($ExitCode -eq 0) {
        Write-Host "‚úÖ $Message" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $Message" -ForegroundColor Red
    }
}

# Fun√ß√£o para imprimir informa√ß√£o
function Print-Info {
    param($Message)
    Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor Blue
}

# Fun√ß√£o para imprimir aviso
function Print-Warning {
    param($Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow
}

# Contador de erros
$errors = 0

Write-Host ""
Print-Info "1. Verificando configura√ß√µes do Django..."
python manage.py check
$checkResult = $LASTEXITCODE
Print-Status $checkResult "Verifica√ß√£o das configura√ß√µes Django"
if ($checkResult -ne 0) { $errors++ }

Write-Host ""
Print-Info "2. Verificando migra√ß√µes pendentes..."
python manage.py makemigrations --check --dry-run
$migrationsResult = $LASTEXITCODE
Print-Status $migrationsResult "Verifica√ß√£o de migra√ß√µes"
if ($migrationsResult -ne 0) { $errors++ }

Write-Host ""
Print-Info "3. Executando migra√ß√µes..."
python manage.py migrate
$migrateResult = $LASTEXITCODE
Print-Status $migrateResult "Execu√ß√£o das migra√ß√µes"
if ($migrateResult -ne 0) { $errors++ }

Write-Host ""
Print-Info "4. Executando todos os testes..."
python manage.py test --verbosity=2
$testResult = $LASTEXITCODE
Print-Status $testResult "Execu√ß√£o dos testes"
if ($testResult -ne 0) { $errors++ }

Write-Host ""
Print-Info "5. Executando testes com cobertura..."
if (Get-Command coverage -ErrorAction SilentlyContinue) {
    coverage run --source='.' manage.py test
    $coverageResult = $LASTEXITCODE
    Print-Status $coverageResult "Testes com cobertura"
    if ($coverageResult -eq 0) {
        Write-Host ""
        Print-Info "Relat√≥rio de cobertura:"
        coverage report
        coverage html
        Print-Info "Relat√≥rio HTML gerado em htmlcov/index.html"
    } else {
        $errors++
    }
} else {
    Print-Warning "Coverage n√£o instalado. Execute: pip install coverage"
}

Write-Host ""
Print-Info "6. Verificando formata√ß√£o do c√≥digo..."
if (Get-Command black -ErrorAction SilentlyContinue) {
    black --check --diff .
    $blackResult = $LASTEXITCODE
    Print-Status $blackResult "Formata√ß√£o com Black"
    if ($blackResult -ne 0) {
        Print-Warning "Execute 'black .' para corrigir a formata√ß√£o"
        $errors++
    }
} else {
    Print-Warning "Black n√£o instalado. Execute: pip install black"
}

Write-Host ""
Print-Info "7. Verificando ordena√ß√£o dos imports..."
if (Get-Command isort -ErrorAction SilentlyContinue) {
    isort --check-only --diff .
    $isortResult = $LASTEXITCODE
    Print-Status $isortResult "Ordena√ß√£o dos imports com isort"
    if ($isortResult -ne 0) {
        Print-Warning "Execute 'isort .' para corrigir a ordena√ß√£o dos imports"
        $errors++
    }
} else {
    Print-Warning "isort n√£o instalado. Execute: pip install isort"
}

Write-Host ""
Print-Info "8. An√°lise de c√≥digo..."
if (Get-Command flake8 -ErrorAction SilentlyContinue) {
    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    $flake8Result = $LASTEXITCODE
    Print-Status $flake8Result "An√°lise de c√≥digo com flake8"
    if ($flake8Result -ne 0) { $errors++ }
} else {
    Print-Warning "flake8 n√£o instalado. Execute: pip install flake8"
}

Write-Host ""
Print-Info "9. Verificando vulnerabilidades de seguran√ßa..."
if (Get-Command safety -ErrorAction SilentlyContinue) {
    safety check
    $safetyResult = $LASTEXITCODE
    Print-Status $safetyResult "Verifica√ß√£o de vulnerabilidades"
    if ($safetyResult -ne 0) { $errors++ }
} else {
    Print-Warning "safety n√£o instalado. Execute: pip install safety"
}

if (Get-Command bandit -ErrorAction SilentlyContinue) {
    bandit -r . -x tests.py,*/migrations/*,*/venv/*,*/.venv/* -f txt
    $banditResult = $LASTEXITCODE
    Print-Status $banditResult "An√°lise de seguran√ßa do c√≥digo"
    if ($banditResult -ne 0) { $errors++ }
} else {
    Print-Warning "bandit n√£o instalado. Execute: pip install bandit"
}

Write-Host ""
Write-Host "==================================================" -ForegroundColor Cyan
if ($errors -eq 0) {
    Write-Host "üéâ Todas as verifica√ß√µes passaram!" -ForegroundColor Green
    Write-Host "‚úÖ Seu c√≥digo est√° pronto para um Pull Request" -ForegroundColor Green
} else {
    Write-Host "‚ùå $errors verifica√ß√£o(√µes) falharam" -ForegroundColor Red
    Write-Host "üîß Corrija os problemas antes de criar um PR" -ForegroundColor Red
    exit 1
}

Write-Host ""
Print-Info "Pr√≥ximos passos:"
Write-Host "1. Git add/commit suas altera√ß√µes"
Write-Host "2. Git push para sua branch"
Write-Host "3. Crie um Pull Request no GitHub"
Write-Host "4. Aguarde a execu√ß√£o autom√°tica dos testes no CI/CD"
